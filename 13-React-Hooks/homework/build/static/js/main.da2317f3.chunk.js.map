{"version":3,"sources":["Timer.js","serviceWorker.js","index.js"],"names":["Timer","useState","segundos","setSegundos","activo","setActivo","tipo","setTipo","myRef","useRef","reset","useEffect","intervalo","setInterval","clearInterval","className","onClick","type","ref","onChange","current","value","placeholder","autoComplete","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"2MA2EeA,EAxED,WAEZ,MAAgCC,mBAAS,GAAE,mBAApCC,EAAQ,KAAEC,EAAW,KAC5B,EAA4BF,oBAAS,GAAM,mBAApCG,EAAM,KAAEC,EAAS,KACxB,EAAwBJ,mBAAS,YAAW,mBAArCK,EAAI,KAAEC,EAAO,KACdC,EAAQC,iBAAO,MAYrB,SAASC,IACPP,EAAY,GACZE,GAAU,EACZ,CA+BA,OAxBAM,qBAAU,WACR,IAAIC,EAAY,KAmBhB,OAlBIR,GAAmB,aAATE,IACZM,EAAYC,aAAY,WACtBV,GAAY,SAAAD,GAAQ,OAAIA,EAAW,CAAC,GACtC,GAAG,MAEDE,GAAmB,qBAATE,IACZM,EAAYC,aAAY,WACtBV,GAAY,SAAAD,GAAQ,OAAIA,EAAW,CAAC,GACtC,GAAG,MAEAE,GAAuB,IAAbF,GAA2B,aAATI,GAC/BQ,cAAcF,GAEC,IAAbV,GAA2B,qBAATI,IACpBI,IACAI,cAAcF,IAGT,kBAAME,cAAcF,EAAW,CACxC,GAAG,CAACR,EAAQF,EAAUI,IAIpB,sBAAKS,UAAU,MAAK,UAClB,qBAAKA,UAAU,OAAM,SAClBb,IAEH,sBAAKa,UAAU,MAAK,UAClB,wBAAQA,UAAU,iBAAiBC,QA5CzC,WACEX,GAAWD,EACb,EA0CyD,SAChDA,EAAS,QAAU,WAEtB,wBAAQW,UAAU,mBAAmBC,QAASN,EAAM,sBAItD,wBAAQK,UAAU,SAASC,QA1C/B,WACc,aAATV,GAAqBC,EAAQ,oBACpB,qBAATD,GAA6BC,EAAQ,WAC1C,EAuCmD,SAC5CD,IAEO,qBAATA,GAA+B,uBAAOW,KAAK,SAASC,IAAKV,EAAOW,SA5DrE,WAEE,IAAID,EAAMV,EAAMY,QAAQC,MACxBlB,EAAYe,EACd,EAwD+FI,YAAY,mBAAmBC,aAAa,UAG7I,EC7DoBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,cAAC,EAAK,IAAKC,SAASC,eAAe,SD6H7C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,YACf,IACCC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,QACtB,G","file":"static/js/main.da2317f3.chunk.js","sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport './Timer.css';\n\nconst Timer = () => {\n\n  const [segundos, setSegundos] = useState(0);\n  const [activo, setActivo] = useState(false);\n  const [tipo, setTipo] = useState('Contador');\n  const myRef = useRef(null);\n\n  function agregaSegundos() {\n    // `current` apunta al elemento de entrada de texto montado\n    let ref = myRef.current.value\n    setSegundos(ref)\n  }\n\n  function toggle(){\n    setActivo(!activo);\n  }\n\n  function reset(){\n    setSegundos(0);\n    setActivo(false);\n  }\n\n  function cambioTipo() {\n    if(tipo === 'Contador') setTipo('Cuenta Regresiva')\n    if(tipo === 'Cuenta Regresiva') setTipo('Contador')\n  }\n\n  useEffect(() => {\n    let intervalo = null;\n    if (activo && tipo === 'Contador') {\n      intervalo = setInterval(() => {\n        setSegundos(segundos => segundos + 1);\n      }, 1000);\n    }\n    if (activo && tipo === 'Cuenta Regresiva') {\n      intervalo = setInterval(() => {\n        setSegundos(segundos => segundos - 1);\n      }, 1000);\n    }\n    if (!activo && segundos !== 0 && tipo === 'Contador') {\n      clearInterval(intervalo);\n    }\n    if (segundos === 0 && tipo === 'Cuenta Regresiva') {\n      reset();\n      clearInterval(intervalo);\n    }\n\n    return () => clearInterval(intervalo);\n  }, [activo, segundos, tipo]);\n\n  \n  return (\n    <div className=\"app\">\n      <div className=\"time\">\n        {segundos}\n      </div>\n      <div className=\"row\">\n        <button className=\"button-primary\" onClick={toggle}>\n          {activo ? 'Pausa' : 'Inicio'}\n        </button>\n        <button className=\"button-secondary\" onClick={reset}>\n          Reset\n        </button>\n      </div>\n      <button className=\"button\" onClick={cambioTipo}>\n        {tipo}\n      </button>\n      {tipo === 'Cuenta Regresiva' && <input type=\"number\" ref={myRef} onChange={agregaSegundos} placeholder=\"Ingresa Segundos\" autoComplete=\"off\"/>}\n    </div>\n  );\n};\n\nexport default Timer;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Timer from './Timer';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Timer />, document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}